////////////////////////////////////////////////////////////////////////////////
// Интеграция elasticsearch (вызов сервера)
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет факт использования в системе интеграции с Elasticsearch.
//
// Возвращаемое значение:
//  Булево - Истина, если интеграция используется.
//
Функция ИспользуетсяИнтеграцияСElasticsearch() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    Возврат ПолучитьФункциональнуюОпцию("md_ИспользоватьВерсионированиеElasticsearch");
    
КонецФункции

// Записывает представление версии документа в регистр сведений "md_ОчередьДанныхКОтправкеВElasticsearch"
//
// Параметры:
//  СтруктураОбработкиES - Структура - Структура описания версиий документа.
//   * ДатаРегистрации - Дата - Дата версии.
//   * СсылкаНаОбъект - ДокументСсылка - Ссылка на версионируемый документ.
//   * СообщениеОтправки - ХранилищеЗначения - Сжатый JSON - документ.
//   * ТипМетаданных - Строка - Строковое имя объекта метаданных.
//
Процедура ПоставитьДокументВОчередьОтправкиВElasticSearch(СтруктураОбработкиES) Экспорт
	
	Перем ПараметрыВерсионирования;
    Перем СообщенияОтправки;
    
    УстановитьПривилегированныйРежим(Истина);
    
    СтруктураОбработкиES.Свойство("ПараметрыВерсионирования", ПараметрыВерсионирования); 
    СтруктураОбработкиES.Свойство("СообщенияОтправки", СообщенияОтправки); 
    
    Если ЗначениеЗаполнено(ПараметрыВерсионирования) И ЗначениеЗаполнено(СообщенияОтправки) Тогда
        
        МенеджерСтруктурыОчередиElasticsearch = РегистрыСведений.md_ОчередьДанныхКОтправкеВElasticsearch;
        
		Для каждого ПараметрВерсионирования Из ПараметрыВерсионирования Цикл
            
            СообщениеОтправки = СообщенияОтправки[ПараметрВерсионирования.СпособСериализации];
            
            Если НЕ ЗначениеЗаполнено(СообщениеОтправки) Тогда
                
                Продолжить;
                
            КонецЕсли;
            
			СтруктураНабораЗаписейРегистра = Новый Структура("ДатаРегистрации,СерверElasticsearch,ИндексES,
            |СсылкаНаОбъект,ТипМетаданных");
            
			ЗаполнитьЗначенияСвойств(СтруктураНабораЗаписейРегистра, СтруктураОбработкиES);
            ЗаполнитьЗначенияСвойств(СтруктураНабораЗаписейРегистра, ПараметрВерсионирования); 
            СтруктураНабораЗаписейРегистра.Вставить("СообщениеОтправки", СообщениеОтправки);
            
		    МенеджерСтруктурыОчередиElasticsearch.ДобавитьУдалитьЗаписьИзРегистра(СтруктураНабораЗаписейРегистра);

		КонецЦикла; 		
	
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет факт использования типа объекта в механизме интеграции с Elasticsearch.
//
// Параметры:
//  ТипМетаданных - Строка - строкове описание типа.
//
// Возвращаемое значение:
//  Массив - массив серверов, на которых требуется зарегистрировать объект.
//
Функция ПараметрыВерсионированияВElasticSearch(ТипМетаданных) Экспорт
	
	ПараметрыВерсионирования = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   md_НастройкаВерсионированияОбъектовВElastic.СерверElasticsearch КАК СерверElasticsearch,
    |   md_НастройкаВерсионированияОбъектовВElastic.ИндексES КАК ИндексES,
    |   md_НастройкаВерсионированияОбъектовВElastic.СпособСериализации КАК СпособСериализации
    |ИЗ
    |   РегистрСведений.md_НастройкаВерсионированияОбъектовВElasticsearch КАК md_НастройкаВерсионированияОбъектовВElastic
    |ГДЕ
    |   md_НастройкаВерсионированияОбъектовВElastic.ТипМетаданных = &ТипМетаданных
    |   И md_НастройкаВерсионированияОбъектовВElastic.Использование";
	
	Запрос.УстановитьПараметр("ТипМетаданных", ТипМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        НастройкаВерсионирования = Новый Структура("СерверElasticsearch, ИндексES, СпособСериализации");
        ЗаполнитьЗначенияСвойств(НастройкаВерсионирования, ВыборкаДетальныеЗаписи);
        
        ПараметрыВерсионирования.Добавить(НастройкаВерсионирования);
        
	КонецЦикла;
	
	Возврат ПараметрыВерсионирования;
	
КонецФункции

// Выполняет построение древа версий для переданного объекта
Процедура ЗаполнитьДеревоВерсийПоОбъекту(ПараметрыПостроения, АдресВоВременномХранилище) Экспорт
    
    РезультатПостроения = Обработки.md_АдминистраторElasticSearch.ЗаполнитьДеревоВерсийПоОбъекту(ПараметрыПостроения);
    ПоместитьВоВременноеХранилище(РезультатПостроения, АдресВоВременномХранилище);
     
КонецПроцедуры

// Проверяет факт использования типа объекта в механизме интеграции с Elasticsearch.
//
// Параметры:
//  ТипМетаданных - Строка - строкове описание типа.
//
// Возвращаемое значение:
//  Массив - массив серверов, на которых требуется зарегистрировать объект.
//
Функция ОбъектВерсионируетсяВElasticSearch(ТипМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СервераХраненияES = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   НастройкаВерсионированияОбъектовВElastic.СерверElasticsearch КАК СерверElasticsearch
    |ИЗ
    |   РегистрСведений.md_НастройкаВерсионированияОбъектовВElasticsearch КАК НастройкаВерсионированияОбъектовВElastic
    |ГДЕ
    |   НастройкаВерсионированияОбъектовВElastic.ТипМетаданных = &ТипМетаданных
    |   И НастройкаВерсионированияОбъектовВElastic.Использование";
	
	Запрос.УстановитьПараметр("ТипМетаданных", ТипМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СервераХраненияES.Добавить(ВыборкаДетальныеЗаписи.СерверElasticsearch);
		
	КонецЦикла;
	
	Возврат СервераХраненияES;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, является ли пользователь администратором Elasticsearch.
//
// Возвращаемое значение:
//  Булево - признак наличия роли "Администратор Elasticsearch" у пользователя
//
Функция ЭтоАдминистраторElasticSearch() Экспорт
    
    Возврат РольДоступна("md_АдминистрированиеИнтеграцииElasticsearch");
    
КонецФункции

// Отправляет зарегистрированные данные версий объект на сервера Elasticsearch, согласно параметрам отправки. 
//
Процедура ОтправитьДанныеОчередейВElasticsearch() Экспорт

	УстановитьПривилегированныйРежим(Истина);
         
    Если md_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
        
        ОтправитьДанныеВElasticsearch();
        
    Иначе
        
        УникальностьЗадания = "ОтправкаВИндексElasticSearch";
        ОтборЗадания = Новый Структура("Ключ, Состояние", УникальностьЗадания, СостояниеФоновогоЗадания.Активно);
        
        ВсеФоновыеЗаданияОтправки = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗадания);
        
        ЗаданиеЗавершено = (ВсеФоновыеЗаданияОтправки.Количество() = 0); 
        
        Если НЕ ЗаданиеЗавершено Тогда
            
            ВызватьИсключение "Возможен одновременно только один поток отправки в ElasticSearch. 
            |Предыдущий вызов задания еще активен";
            
        КонецЕсли;
        
        ПараметрыЗапускаЗадания = Новый Массив;	
        ФоновыеЗадания.Выполнить("md_ВерсионированиеElasticsearchВызовСервера.ОтправитьДанныеВElasticsearch", 
        ПараметрыЗапускаЗадания, 
        УникальностьЗадания,
        Метаданные.РегламентныеЗадания.md_ОтправкаДанныхОчередейВElasticsearch.Наименование);
        
    КонецЕсли;

КонецПроцедуры

// Очищает журнал логов работы подсистемы Elasticserch. По умолчанию данные живут два дня 
//
Процедура ОчиститьЖурналСообщенийElasticsearch() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    
    Если md_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
        
        ОчиститьЖурналСообщенийElasticsearchЗаПериод();
        
    Иначе
        
        УникальностьЗадания = "ОчисткаЖурналовСообщенийElasticsearch";
        ОтборЗадания = Новый Структура("Ключ, Состояние", УникальностьЗадания, СостояниеФоновогоЗадания.Активно);
        ВсеФоновыеЗаданияУдаления = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗадания);
        
        ЗаданиеЗавершено =  (ВсеФоновыеЗаданияУдаления.Количество() = 0);
        
        Если НЕ ЗаданиеЗавершено Тогда
            
            ВызватьИсключение "Возможен одновременно только один поток очистки журналов ElasticSearch.";
            
        КонецЕсли; 
        
        ПараметрыЗапускаЗадания = Новый Массив;	
        ФоновыеЗадания.Выполнить("md_ВерсионированиеElasticsearchВызовСервера.ОчиститьЖурналСообщенийElasticsearchЗаПериод", 
        ПараметрыЗапускаЗадания, 
        УникальностьЗадания,
        Метаданные.РегламентныеЗадания.md_ОчисткаЖурналовСообщенийElasticsearch.Наименование);
        
    КонецЕсли; 
    
КонецПроцедуры 

// Получает универсальное время в формате UTC на сервере 
//
// Возвращаемое значение:
//  Дата - текущая дата UTC на сервере приложений 1С
Функция УниверсальноеВремяНаСервере() Экспорт
    
    Возврат ТекущаяУниверсальнаяДата();
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыИзХранилища(Объект, ХранилищеПараметров, Ключ) Экспорт

	Перем ПараметрыВерсионирования;

	ВсеПараметры = ХранилищеПараметров.Получить();
	ПараметрыПоКлючу = ВсеПараметры.Получить(Ключ);

	Если ЗначениеЗаполнено(ПараметрыПоКлючу) Тогда

		ВсегоВерсий = 0;
		ПараметрыВерсионирования = Новый Структура("СерверES, ИндексES");
		ЗаполнитьЗначенияСвойств(ПараметрыВерсионирования, ПараметрыПоКлючу);
		ПараметрыВерсионирования.Вставить("ДатаОтбора", ТекущаяУниверсальнаяДата());
		ПараметрыВерсионирования.Вставить("ДокументСсылка", Объект);

		СводныеДанные = md_ВерсионированиеElasticsearchСлужебный.ПолучитьСводныеДанныеОбъекта(ПараметрыПоКлючу.СерверES, 
		ПараметрыПоКлючу.ИндексES, Объект);

		СводныеДанные.Свойство("ВсегоВерсий", ВсегоВерсий);

		ПараметрыВерсионирования.Вставить("ВсегоВерсий", ВсегоВерсий);
		
	КонецЕсли;

	Возврат ПараметрыВерсионирования;

КонецФункции

Процедура ОчиститьЖурналСообщенийElasticsearchЗаПериод() Экспорт
    
    РегистрыСведений.md_ЖурналСообщенийElasticsearch.ОчиститьЖурналСообщенийElasticsearchЗаПериод();
    
КонецПроцедуры

Функция СформироватьОписаниеПроверокИнтеграции()
    
    МассивПроверок = Новый Массив(3);
    
    МассивПроверок[0] = Новый Структура("УровеньПроверки, Наименование", "Сервер", "Параметры соединения");
    МассивПроверок[1] = Новый Структура("УровеньПроверки, Наименование", "Сервер", "Доступность соединения");
    МассивПроверок[2] = Новый Структура("УровеньПроверки, Наименование", "Индекс", "Параметры индекса");
    
    Возврат МассивПроверок;
    
КонецФункции

Функция КонтрольУсловийИнтеграции(ОписаниеПроверок, ПроверяемыеДанные, УровеньПроверки)
    
    ЕстьУсловия = Истина;
    
    Для Каждого ОписаниеПроверки Из ОписаниеПроверок Цикл
        
        Если ОписаниеПроверки.УровеньПроверки = УровеньПроверки Тогда
            
            Если Не ВозможностьПродолженияИнтеграции(ОписаниеПроверки.Наименование, ПроверяемыеДанные) Тогда
                
                ЕстьУсловия = Ложь;
                Прервать;
                
            КонецЕсли; 
            
        КонецЕсли; 
        
    КонецЦикла; 
    
    Возврат ЕстьУсловия;
    
КонецФункции

Функция ВозможностьПродолженияИнтеграции(НаименованиеПроверки, ПараметрыКонтроля)
    
    Перем УровеньЖурнала;
    Перем ДанныеИнформирования;
    Перем СообщениеИнформирования;
    
	Возможность = Истина;
	
	Если НаименованиеПроверки = "Параметры соединения" Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыКонтроля.АдресСервера) Тогда
            
            УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
            ДанныеИнформирования = ПараметрыКонтроля.СерверElasticsearch;
            СообщениеИнформирования = НСтр("ru='Не заполнен адрес сервера. Отправка невозможна'");
			            
            Возможность = Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли НаименованиеПроверки = "Доступность соединения" Тогда
		
		Если НЕ ПроверкаНаПоддерживаемуюВерсию(ПараметрыКонтроля) Тогда
            
            УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
            ДанныеИнформирования = Неопределено;
            СообщениеИнформирования = СтрШаблон(НСтр("ru='Сервер Elasticsearch: %1: %2 не доступен'"), 
            ПараметрыКонтроля.АдресСервера, ПараметрыКонтроля.Порт);
            
            Возможность = Ложь;
			
		КонецЕсли; 
				
	ИначеЕсли НаименованиеПроверки = "Параметры индекса" Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыКонтроля.ИндексES) Тогда
            
            УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
            ДанныеИнформирования = ПараметрыКонтроля.СерверElasticsearch; 
            
            ШаблонИнфомирования = НСтр("ru='Сервер: %1, Индекс: ?. Не заполнен индекс. Отправка невозможна'");
            СообщениеИнформирования = СтрШаблон(ШаблонИнфомирования,
            ПараметрыКонтроля.СерверElasticsearch);
            
            Возможность = Ложь;

		КонецЕсли; 
		
    КонецЕсли; 
    
    Если Не Возможность Тогда
        
        ЗафиксироватьСобытиеИнтеграцииСElasticsearch(УровеньЖурнала, ДанныеИнформирования, СообщениеИнформирования);

    КонецЕсли; 
	
	Возврат Возможность;
	
КонецФункции

Процедура ОтправитьДанныеВElasticsearch() Экспорт
       
    ОписаниеПроверок = СформироватьОписаниеПроверокИнтеграции();
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ТекущаяДатаСистемы", КонецДня(ТекущаяДатаСеанса()));
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 500
    |	ОчередьДанныхКОтправкеВElasticsearch.ДатаРегистрации КАК ДатаРегистрации,
    |	ОчередьДанныхКОтправкеВElasticsearch.СерверElasticsearch КАК СерверElasticsearch,
    |	ОчередьДанныхКОтправкеВElasticsearch.СсылкаНаОбъект КАК СсылкаНаОбъект,
    |	ОчередьДанныхКОтправкеВElasticsearch.СообщениеОтправки КАК СообщениеОтправки,
    |	НастройкаВерсионированияОбъектовВElasticsearch.ИндексES КАК ИндексES,
    |	ЕСТЬNULL(НастройкаВерсионированияОбъектовВElasticsearch.ПакетнаяОтправка, ЛОЖЬ) КАК ИспользоватьBulkApi,
    |	ЕСТЬNULL(СервераElasticsearch.АдресСервера, """") КАК АдресСервера,
    |	ЕСТЬNULL(СервераElasticsearch.Порт, 0) КАК Порт,
    |	ЕСТЬNULL(md_ИндексыElasticsearch.Имя, """") КАК ИмяИндекса
    |ИЗ
    |	РегистрСведений.md_ОчередьДанныхКОтправкеВElasticsearch КАК ОчередьДанныхКОтправкеВElasticsearch
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.md_НастройкаВерсионированияОбъектовВElasticsearch КАК
    |			НастройкаВерсионированияОбъектовВElasticsearch
    |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.md_ИндексыElasticsearch КАК md_ИндексыElasticsearch
    |			ПО НастройкаВерсионированияОбъектовВElasticsearch.ИндексES = md_ИндексыElasticsearch.Ссылка
    |		ПО ОчередьДанныхКОтправкеВElasticsearch.СерверElasticsearch = НастройкаВерсионированияОбъектовВElasticsearch.СерверElasticsearch
    |		И ОчередьДанныхКОтправкеВElasticsearch.ТипМетаданных = НастройкаВерсионированияОбъектовВElasticsearch.ТипМетаданных
    |		И ОчередьДанныхКОтправкеВElasticsearch.ИндексES = НастройкаВерсионированияОбъектовВElasticsearch.ИндексES
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.md_СервераElasticsearch КАК СервераElasticsearch
    |		ПО ОчередьДанныхКОтправкеВElasticsearch.СерверElasticsearch = СервераElasticsearch.Ссылка
    |ГДЕ
    |	НЕ ЕСТЬNULL(НастройкаВерсионированияОбъектовВElasticsearch.Приостановлено, ЛОЖЬ)
    |УПОРЯДОЧИТЬ ПО
    |	ДатаРегистрации
    |ИТОГИ
    |	МАКСИМУМ(ИспользоватьBulkApi),
    |	МАКСИМУМ(АдресСервера),
    |	МАКСИМУМ(Порт),
    |	МАКСИМУМ(ИмяИндекса)
    |ПО
    |	СерверElasticsearch,
    |	ИндексES";
    
    ВыборкаСерверElasticsearch = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаСерверElasticsearch.Следующий() Цикл
        
        ПараметрыОтправкиПакета = Новый Структура;
        ПараметрыОтправкиПакета.Вставить("АдресСервера", ВыборкаСерверElasticsearch.АдресСервера);
        ПараметрыОтправкиПакета.Вставить("Порт", ВыборкаСерверElasticsearch.Порт);
        ПараметрыОтправкиПакета.Вставить("СерверElasticsearch", ВыборкаСерверElasticsearch.СерверElasticsearch);
        
        ТаблицаОчисткиОчередейДанных = ИнициализироватьТаблицуОчередейДанных();
        
        Если НЕ КонтрольУсловийИнтеграции(ОписаниеПроверок, ПараметрыОтправкиПакета, "Сервер") Тогда
            
            Продолжить;	
            
        КонецЕсли; 
                
        ВыборкаИндексES = ВыборкаСерверElasticsearch.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        
        Пока ВыборкаИндексES.Следующий() Цикл
            
            ПараметрыОтправкиПакета.Вставить("ИндексES", ВыборкаИндексES.ИмяИндекса);
            
            Если НЕ КонтрольУсловийИнтеграции(ОписаниеПроверок, ПараметрыОтправкиПакета, "Индекс") Тогда
            
                Продолжить;	
            
            КонецЕсли;
            
            АдресРесурса = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1/_doc",
            ВыборкаИндексES.ИмяИндекса);
            ПараметрыОтправкиПакета.Вставить("АдресРесурса", АдресРесурса);
            ПараметрыОтправкиПакета.Вставить("ПакетнаяОтправка", ВыборкаИндексES.ИспользоватьBulkApi);
            
            ОтправитьВИндексДанныеОбъектов(ВыборкаИндексES, ПараметрыОтправкиПакета, ТаблицаОчисткиОчередейДанных);
            
        КонецЦикла; 
        
        СократитьОчередьКОтправке(ТаблицаОчисткиОчередейДанных);
        
    КонецЦикла; 
    
КонецПроцедуры

Процедура ОтправитьВИндексДанныеОбъектов(ВыборкаИндексES, ПараметрыОтправкиПакета, ТаблицаОчисткиОчередейДанных)
    
    Перем КодСостояния;
    
    ВыборкаСообщение = ВыборкаИндексES.Выбрать();
    
    ИтераторУспешнойОтправки = 0;
          
    Если Не ПараметрыОтправкиПакета.ПакетнаяОтправка Тогда
        
        Пока ВыборкаСообщение.Следующий() Цикл
            
            ПараметрыОтправкиПакета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
            РезультатИндексации = ПроиндексироватьДокументВElasticsearch(ПараметрыОтправкиПакета, 
            ВыборкаСообщение.СообщениеОтправки);
            
            РезультатИндексации.Свойство("КодСостояния", КодСостояния);
             
            Если КодСостоянияУспех(КодСостояния) Тогда
            	                           
                ИтераторУспешнойОтправки = ИтераторУспешнойОтправки + 1;		
                ЗаполнитьЗначенияСвойств(ТаблицаОчисткиОчередейДанных.Добавить(), ВыборкаСообщение);
                
            КонецЕсли; 
            
        КонецЦикла; 
        
    Иначе
        
        ИтераторУспешнойОтправки = ВыборкаСообщение.Количество();
        СообщениеПакетнойОтправки = "";
        ЗаписьТекста = Новый ЗаписьXML;
        ЗаписьТекста.УстановитьСтроку("UTF-8");
        
        Пока ВыборкаСообщение.Следующий() Цикл
            
            ЗаписатьСтрокуВТелоЗапроса(ЗаписьТекста, ВыборкаСообщение);
            ЗаполнитьЗначенияСвойств(ТаблицаОчисткиОчередейДанных.Добавить(), ВыборкаСообщение); 
            
        КонецЦикла; 
        
        СообщениеПакетнойОтправки = ЗаписьТекста.Закрыть();
        
        ПараметрыОтправкиПакета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
        ПроиндексироватьДокументВElasticsearchBulkApi(ПараметрыОтправкиПакета, СообщениеПакетнойОтправки);
        
    КонецЕсли; 
    
    ШаблонИнформирования = НСтр("ru='Сервер: %1, Индекс: %2, Помещено документов: %3'");
    
    СтрокаИнформирования = СтрШаблон(ШаблонИнформирования, ПараметрыОтправкиПакета.СерверElasticsearch, 
    ПараметрыОтправкиПакета.ИндексES, ИтераторУспешнойОтправки); 
       
    ЗафиксироватьСобытиеИнтеграцииСElasticsearch(УровеньЖурналаРегистрации.Информация, , СтрокаИнформирования);
    
КонецПроцедуры

Процедура ПроиндексироватьДокументВElasticsearchBulkApi(ПараметрыОтправкиПакета, СообщениеОтправки)

	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	
	СтруктураОтправкиПакета = Новый Структура("АдресСервера, Порт");
	ЗаполнитьЗначенияСвойств(СтруктураОтправкиПакета, ПараметрыОтправкиПакета);
	
	СтруктураОтправкиПакета.Вставить("Заголовки", ЗаголовкиЗапроса);
	СтруктураОтправкиПакета.Вставить("АдресРесурса", ПараметрыОтправкиПакета.АдресРесурса + "/_bulk" + "?pretty");
	СтруктураОтправкиПакета.Вставить("HTTPМетод", "POST");
	СтруктураОтправкиПакета.Вставить("ВидОперации", "Индексирование документа (Bulk Api)");
	СтруктураОтправкиПакета.Вставить("ТелоЗапроса", СообщениеОтправки);
	СтруктураОтправкиПакета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	md_ОбщегоНазначенияElasticsearch.ВыполнитьЗапросКElasticSearch(СтруктураОтправкиПакета);
		
КонецПроцедуры

Процедура ЗаписатьСтрокуВТелоЗапроса(ЗаписьТекста, ВыборкаСообщение)
    
    ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
    
    ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
    
    СтруктураЗаголовка = Новый Структура;
    
    СтруктураИндекса = Новый Структура;
    СтруктураИндекса.Вставить("_index", ВыборкаСообщение.ИндексES);
    СтруктураИндекса.Вставить("_type", "_doc");
    
    ИдентификаторЗапроса = 
    md_ВерсионированиеElasticsearchСлужебный.ПолучитьПредставлениеСтрокиUUIDДляES(Строка(Новый УникальныйИдентификатор));
    
    СтруктураИндекса.Вставить("_id", ИдентификаторЗапроса);
    
    СтруктураЗаголовка.Вставить("index", СтруктураИндекса);
    ЗаписатьJSON(ЗаписьJSON, СтруктураЗаголовка);
                   
    ЗаголовокBulkЗапроса = ЗаписьJSON.Закрыть(); // action_and_meta_data
    ЗаписьТекста.ЗаписатьБезОбработки(ЗаголовокBulkЗапроса + Символы.ПС);
    
    ТелоBulkЗапроса = ПреобразоватьСообщениеВстроку(ВыборкаСообщение.СообщениеОтправки.Получить());
    ЗаписьТекста.ЗаписатьБезОбработки(ТелоBulkЗапроса + Символы.ПС);
    
КонецПроцедуры
 
Функция ПреобразоватьСообщениеВстроку(ИсходныйТекст) Экспорт
    
    ТекстВСтроке = "";
    ТекстВСтроке = СтрЗаменить(ИсходныйТекст, Символы.ВК, "");
    ТекстВСтроке = СтрЗаменить(ТекстВСтроке, Символы.ПС, "");
    
    Возврат ТекстВСтроке;
       
КонецФункции

Функция ПроиндексироватьДокументВElasticsearch(ПараметрыОтправкиПакета, СообщениеОтправки)

	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
    
    ШаблонРесурса = "%1/%2?pretty";
    
    АдресРесурса = СтрШаблон(ШаблонРесурса, ПараметрыОтправкиПакета.АдресРесурса, 
    md_ВерсионированиеElasticsearchСлужебный.ПолучитьПредставлениеСтрокиUUIDДляES(
    Строка(ПараметрыОтправкиПакета.УникальныйИдентификатор)));
        
	СтруктураОтправкиПакета = Новый Структура("АдресСервера,Порт");
	ЗаполнитьЗначенияСвойств(СтруктураОтправкиПакета, ПараметрыОтправкиПакета);
	
	СтруктураОтправкиПакета.Вставить("Заголовки", ЗаголовкиЗапроса);
	СтруктураОтправкиПакета.Вставить("АдресРесурса", АдресРесурса);
	СтруктураОтправкиПакета.Вставить("HTTPМетод", "PUT");
	СтруктураОтправкиПакета.Вставить("ВидОперации", "Индексирование документа");
	СтруктураОтправкиПакета.Вставить("ТелоЗапроса", СообщениеОтправки.Получить());
	СтруктураОтправкиПакета.Вставить("УникальныйИдентификатор", ПараметрыОтправкиПакета.УникальныйИдентификатор);
	
	Возврат md_ОбщегоНазначенияElasticsearch.ВыполнитьЗапросКElasticSearch(СтруктураОтправкиПакета);
		
КонецФункции
 
Функция ПроверкаНаПоддерживаемуюВерсию(ПараметрыОтправкиПакета)
    
    Перем КодСостояния;
    
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
	
	СтруктураОтправкиПакета = Новый Структура("АдресСервера, Порт");
	ЗаполнитьЗначенияСвойств(СтруктураОтправкиПакета, ПараметрыОтправкиПакета);
	
	СтруктураОтправкиПакета.Вставить("Заголовки", ЗаголовкиЗапроса);
	СтруктураОтправкиПакета.Вставить("АдресРесурса", "/");
	СтруктураОтправкиПакета.Вставить("HTTPМетод", "GET");
	СтруктураОтправкиПакета.Вставить("ВидОперации", "Проверка версии");
	СтруктураОтправкиПакета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	ОтветES = md_ОбщегоНазначенияElasticsearch.ВыполнитьЗапросКElasticSearch(СтруктураОтправкиПакета);
    
    ОтветES.Свойство("КодСостояния", КодСостояния);
    СерверДоступен = КодСостоянияУспех(КодСостояния);
    
    Возврат СерверДоступен;
   	
КонецФункции
 
Процедура ЗафиксироватьСобытиеИнтеграцииСElasticsearch(Уровень, Данные = Неопределено, Сообщение = "") Экспорт
    
    md_ВерсионированиеElasticsearchСлужебный.ЗафиксироватьСобытиеИнтеграцииСElasticsearch(Уровень, Данные, Сообщение);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуОчередейДанных()

    ТипСерверElasticsearch = Новый ОписаниеТипов("СправочникСсылка.md_СервераElasticsearch");
    ТипИндексElasticsearch = Новый ОписаниеТипов("СправочникСсылка.md_ИндексыElasticsearch");
	
	ТаблицаОчередей = Новый ТаблицаЗначений;
	ТаблицаОчередей.Колонки.Добавить("ДатаРегистрации", Новый ОписаниеТипов("Дата"));
	ТаблицаОчередей.Колонки.Добавить("СерверElasticsearch", ТипСерверElasticsearch);
	ТаблицаОчередей.Колонки.Добавить("ИндексES", ТипИндексElasticsearch);
	ТаблицаОчередей.Колонки.Добавить("СсылкаНаОбъект");
	
	Возврат ТаблицаОчередей;
	
КонецФункции 

Процедура СократитьОчередьКОтправке(ТаблицаОчисткиОчередейДанных)

	Если Не ТаблицаОчисткиОчередейДанных.Количество() = 0 Тогда
		
		Для каждого ОписаниеОчистки Из ТаблицаОчисткиОчередейДанных Цикл
		
			РегистрыСведений.md_ОчередьДанныхКОтправкеВElasticsearch.ДобавитьУдалитьЗаписьИзРегистра(ОписаниеОчистки, Истина);			
		
		КонецЦикла; 
			
	КонецЕсли; 

КонецПроцедуры

Функция КодСостоянияУспех(Код)
    
    НижняяГраница = 200;
    ВерхняяГраница = 300;
    
    ЭтоКодУспешногоЗапроса = ЗначениеЗаполнено(Код) И Код >= НижняяГраница И Код < ВерхняяГраница;
    
    Возврат ЭтоКодУспешногоЗапроса;
    
КонецФункции

// Возвращает текущего пользователя сеанса 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - элемент справочника "Пользователи"
//
Функция ТекущийПользователь() Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    Возврат ПараметрыСеанса.md_ТекущийПользователь;
    
КонецФункции

#КонецОбласти

#Область УстановкаПараметровСеанса

// Вызов этой процедуры необходимо разместить в модуле сеанса в процедуре УстановкаПараметровСеанса
// согласно документации.
//
// Параметры:
//  ИменаПараметровСеанса - Массив, Неопределено - имена параметров сеанса для инициализации.
//                                                 Массив устанавливаемых идентификаторов параметров сеанса,
//                                                 которые нужно инициализировать, если обработчик вызывается
//                                                 перед использованием неинициализированных параметров сеанса.
//                                                 Неопределено, если обработчик события вызывается системой при начале сеанса.
//
// Возвращаемое значение:
//  Массив - имена параметров сеанса, значения которых были успешно установлены.
//
Функция УстановкаПараметровСеанса(ИменаПараметровСеанса) Экспорт

    УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
        
        Возврат УстановленныеПараметры;
        
	КонецЕсли;
	
	Для Каждого ИмяПараметраСеанса Из ИменаПараметровСеанса Цикл
		
		Если ИмяПараметраСеанса = "md_ТекущийПользователь" Тогда
			
			md_ОбщегоНазначения.ОпределитьСоздатьТекущегоПользователя();
			УстановленныеПараметры.Добавить("md_ТекущийПользователь");
			Продолжить;
			
		КонецЕсли;
		
		Если ИмяПараметраСеанса = "md_ПараметрыКлиентаНаСервере" Тогда
			
			md_ОбщегоНазначения.УстановитьПараметрыКлиентаНаСервре();
			УстановленныеПараметры.Добавить("md_ПараметрыКлиентаНаСервере");
			Продолжить;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УстановленныеПараметры;
	
КонецФункции    

#КонецОбласти 
